{"version":3,"sources":["services/service.js","services/TrackerService.js","utilities/index.js","components/ApiRace.js","components/Detail.js","api/index.js","services/TrainsService.js","components/Station.js","components/App.js","registerServiceWorker.js","index.js"],"names":["keharataStationCodes","Object","keys","stoppingSections","previousResponseTimestamp","addLeadingZero","value","getUrl","path","process","ApiRace","props","isPollingEnabled","state","trainNumber","data1","longitude","latitude","speed","updated","Date","data2","setTimeout","updateLocation","poll","train","this","Promise","resolve","reject","fetch","replace","then","response","json","length","location","coordinates","timestamp","catch","message","console","log","setState","oldData1","responseTimestamp","trains","hasOwnProperty","trainData","parseFloat","service","oldData2","stations","filter","station","passengerTraffic","includes","stationShortCode","className","data","oldData","Component","Map","toFixed","date","getHours","getMinutes","getSeconds","formatTime","parseInt","getTime","width","height","map","key","x","y","name","stationName","color","Station","cx","cy","r","radius","style","fill","stroke","strokeWidth","fontSize","Train","mapSectionIdToStation","sections","sectionId","trainTrackingVersions","formatSectionId","sectionCode","getOccupied","url","getFullYear","getMonth","getDate","formatUrlDate","occupied","current","next","previous","occupiedUpdated","i","entry","type","trackSection","nextStation","previousStation","version","Detail","URL_STATION","KEHARATA_TRAIN_LETTERS","mapStationNameToStationShortCode","getTrainsByStation","minutesBeforeDeparture","minutesAfterDeparture","error","fetchTrainsByStation","commuterLineID","departureTimetable","timeTableRows","timeTable","pop","number","code","scheduledDepartureTime","scheduledTime","track","commercialTrack","sort","trainA","trainB","urlNameToHumanReadableName","App","match","params","formatTimeShort","to","exact","component","Home","isLocalhost","Boolean","window","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","document","getElementById","URL","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.1faa126c.chunk.js","sourcesContent":["import sections from 'data/sections';\nimport stoppingSections from 'data/stopping-sections';\nimport log from 'data/9172';\n// import log from './data/8767';\n\n// const TRAIN_URL = 'https://junatkartalla-cal-prod.herokuapp.com/trains/1520974201460';\n// const TRAIN_URL = 'https://rata.digitraffic.fi/api/v1/trains/latest/[TRAIN_NUMBER]';\nconst URL_TRAIN_TRACKING = 'https://rata.digitraffic.fi/api/v1/train-tracking/[DATE]/[TRAIN_NUMBER]?version=[VERSION]';\n\nconst LOG_ENTRY_TYPE_OCCUPY = 'OCCUPY';\nconst LOG_ENTRY_TYPE_RELEASE = 'RELEASE';\n\nlet sectionIds = Object.keys(sections);\n\nlet mapSectionIdToStation = {};\nfor (let station of Object.keys(stoppingSections)) {\n  for (let sectionId of stoppingSections[station]) {\n    mapSectionIdToStation[sectionId] = station;\n  }\n}\n\nlet trainTrackingVersions = {};\n\n/**\n * @param value\n * @returns {string}\n */\nexport const addLeadingZero = (value) => {\n  return value < 10 ? '0' + value : '' + value;\n};\n\nconst formatUrlDate = (date) => {\n  return date.getFullYear()\n    + '-'\n    + addLeadingZero(date.getMonth() + 1)\n    + '-'\n    + addLeadingZero(date.getDate());\n};\n\nconst getLocationMetres = (location) => {\n  return location.kilometres * 1000 + location.metres;\n};\n\nexport const getSectionStartLocation = (section) => {\n  return getLocationMetres(section.ranges[0].startLocation);\n};\n\nexport const getSectionEndLocation = (section) => {\n  return getLocationMetres(section.ranges[0].endLocation);\n};\n\nexport const getSectionTrack = (section) => {\n  return section.ranges[0].startLocation.track;\n};\n\nexport const getSectionLength = (section) => {\n  let { startLocation, endLocation } = section.ranges[0];\n  return (endLocation.kilometres * 1000 + endLocation.metres) -\n    (startLocation.kilometres * 1000 + startLocation.metres);\n};\n\nexport const getTrainTrackingData = () => {\n  return log;\n};\n\nexport const getSection = (sectionId) => {\n  return sections[sectionId];\n};\n\nexport const getSectionIds = () => {\n  return sectionIds;\n};\n\nexport const formatSectionId = (station, sectionCode) => {\n  return station + '-' + sectionCode;\n};\n\nexport const getLogStartTime = (log) => {\n  return new Date((new Date(log[0].timestamp)).getTime() - 1000);\n};\n\n// const formatReadableTime = (date) => {\n//   return date.getHours()\n//       + '-'\n//       + addLeadingZero(date.getMinutes() + 1)\n//       + '-'\n//       + addLeadingZero(date.getSeconds());\n// };\n\nexport const updateOccupied = (log, occupied, previousDate, newDate) => {\n  // let date = new Date();\n  // console.log(formatReadableTime(previousDate));\n  // console.log(formatReadableTime(newDate));\n\n  let logPart = log\n    .filter(entry => {\n      let entryTime = (new Date(entry.timestamp)).getTime();\n      return entryTime >= previousDate.getTime() && entryTime <=\n        newDate.getTime();\n    });\n\n  let newOccupied = [...occupied];\n  for (let entry of logPart) {\n    if (entry.type === LOG_ENTRY_TYPE_OCCUPY) {\n      // console.log('occupy', formatSectionId(entry.station, entry.trackSection));\n      newOccupied.push(formatSectionId(entry.station, entry.trackSection));\n    } else if (entry.type === LOG_ENTRY_TYPE_RELEASE) {\n      // console.log('release', formatSectionId(entry.station, entry.trackSection));\n      newOccupied = newOccupied.filter(id => {\n        return id !== formatSectionId(entry.station, entry.trackSection);\n      });\n    }\n  }\n\n  // console.log(newOccupied);\n\n  return newOccupied;\n};\n\nexport const updateOccupiedReverse = (log, occupied, previousDate, newDate) => {\n  // let date = new Date();\n  // console.log(formatReadableTime(previousDate));\n  // console.log(formatReadableTime(newDate));\n\n  let logPart = log\n    .filter(entry => {\n      let entryTime = (new Date(entry.timestamp)).getTime();\n      return entryTime >= newDate.getTime() && entryTime <=\n        previousDate.getTime();\n    })\n    .sort((a, b) => b.id - a.id);\n\n  let newOccupied = [...occupied];\n  for (let entry of logPart) {\n    if (entry.type === LOG_ENTRY_TYPE_RELEASE) {\n      // console.log('occupy', formatSectionId(entry.station, entry.trackSection));\n      newOccupied.push(formatSectionId(entry.station, entry.trackSection));\n    } else if (entry.type === LOG_ENTRY_TYPE_OCCUPY) {\n      // console.log('release', formatSectionId(entry.station, entry.trackSection));\n      newOccupied = newOccupied.filter(id => {\n        return id !== formatSectionId(entry.station, entry.trackSection);\n      });\n    }\n  }\n\n  // console.log(newOccupied);\n\n  return newOccupied;\n};\n\nexport const getOccupied = (trainNumber) => {\n  let date = new Date();\n  // date.setHours(-2);\n  // let trainNumber = 9174;\n  // console.log(formatUrlDate(date));\n\n  let url = URL_TRAIN_TRACKING\n    .replace(/\\[DATE\\]/, formatUrlDate(date))\n    .replace(/\\[TRAIN_NUMBER\\]/, trainNumber)\n    .replace(\n      /\\[VERSION\\]/,\n      trainTrackingVersions.hasOwnProperty(trainNumber)\n        ? trainTrackingVersions[trainNumber]\n        : 1000\n    );\n\n  // console.log(trainTrackingVersions);\n\n  let occupied = {\n    current: null,\n    next: null,\n    previous: null,\n  };\n  return new Promise((resolve, reject) => {\n    fetch(url).then(response => response.json())\n      .then(log => {\n        let occupiedUpdated = false;\n        for (let i = 0; i < log.length; i++) {\n          let entry = log[i];\n          if (entry.type === LOG_ENTRY_TYPE_OCCUPY) {\n            let sectionId = formatSectionId(\n              entry.station, entry.trackSection\n            );\n            // console.log(sectionId);\n            occupied.next = entry.nextStation;\n            occupied.previous = entry.previousStation;\n            occupied.current = mapSectionIdToStation.hasOwnProperty(sectionId)\n              ? mapSectionIdToStation[sectionId]\n              : sectionId;\n\n            trainTrackingVersions[trainNumber] = entry.version;\n            occupiedUpdated = true;\n\n            break;\n          }\n        }\n\n        if (occupiedUpdated) {\n          resolve(occupied);\n        } else {\n          reject('No new occupy entries.');\n        }\n\n      });\n  });\n};","import stoppingSections from 'data/stopping-sections';\n\nlet keharataStationCodes = Object.keys(stoppingSections);\n\nconst URL_LOCATION = 'https://rata.digitraffic.fi/api/v1/train-locations/latest/[TRAIN_NUMBER]';\nconst URL_LOCATION2 = 'https://junatkartalla-cal-prod.herokuapp.com/trains/[PREVIOUS_RESPONSE_TIMESTAMP]';\nconst URL_STATIONS = 'https://rata.digitraffic.fi/api/v1/metadata/stations';\n\nlet previousResponseTimestamp = 1;\n\nexport const getStations = () => {\n  return fetch(URL_STATIONS)\n      .then(response => response.json())\n      .then(stations => {\n        let keharataStations = stations.filter(station => station.passengerTraffic === true && keharataStationCodes.includes(station.stationShortCode));\n        return keharataStations;\n      })\n      .catch();\n};\n\nexport const getLocation = (train) => {\n  return new Promise((resolve, reject) => {\n    fetch(URL_LOCATION.replace(/\\[TRAIN_NUMBER\\]/, train))\n        .then(response => response.json())\n        .then(json => {\n          if (json.length > 0) {\n            json = json[0];\n            resolve({\n              longitude: json.location.coordinates[0],\n              latitude: json.location.coordinates[1],\n              speed: json.speed,\n              updated: new Date(json.timestamp),\n            });\n          } else {\n            reject('not found')\n          }\n\n        })\n        .catch(message => {\n          reject(message);\n        });\n  });\n};\n\nexport const getLocation2 = (train) => {\n  return new Promise((resolve, reject) => {\n    fetch(URL_LOCATION2.replace(/\\[PREVIOUS_RESPONSE_TIMESTAMP\\]/, previousResponseTimestamp))\n        .then(response => response.json())\n        .then(json => {\n          previousResponseTimestamp = json.responseTimestamp;\n          if (json.trains.hasOwnProperty(train)) {\n            let trainData = json.trains[train];\n            resolve({\n              longitude: parseFloat(trainData.longitude),\n              latitude: parseFloat(trainData.latitude),\n              speed: trainData.speed,\n              updated: new Date(trainData.updated),\n            });\n          } else {\n            reject('not updated');\n          }\n        })\n        .catch(message => {\n          reject(message);\n        });\n  });\n};","const addLeadingZero = (value) => {\n  return value < 10 ? '0' + value : '' + value;\n};\n\nexport const formatTime = (timestamp) => {\n  let date = new Date(timestamp);\n  return addLeadingZero(date.getHours())\n      + ':'\n      + addLeadingZero(date.getMinutes())\n      + ':'\n      + addLeadingZero(date.getSeconds());\n};\n\nexport const formatTimeShort = (timestamp) => {\n  let date = new Date(timestamp);\n  return addLeadingZero(date.getHours())\n      + ':'\n      + addLeadingZero(date.getMinutes());\n};\n\nexport const getUrl = (path) => {\n  return process.env.PUBLIC_URL + path;\n};","import React, {Component} from 'react';\nimport * as service from 'services/TrackerService';\nimport 'styles/ApiRace.css';\nimport {formatTime} from 'utilities';\n\nclass ApiRace extends Component {\n  constructor(props) {\n    super(props);\n\n    this.isPollingEnabled = true;\n\n    this.state = {\n      trainNumber: props.trainNumber,\n      data1: {\n        longitude: 0,\n        latitude: 0,\n        speed: 0,\n        updated: new Date(),\n      },\n      data2: {\n        longitude: 0,\n        latitude: 0,\n        speed: 0,\n        updated: new Date(),\n      }\n    };\n  }\n\n  poll() {\n    setTimeout(() => {\n      if (this.isPollingEnabled) {\n        this.updateLocation();\n        this.poll();\n      }\n\n    }, 5000);\n  }\n\n  updateLocation() {\n    service.getLocation(this.state.trainNumber)\n        .then(({longitude, latitude, speed, updated}) => {\n          console.log('update 1');\n          this.setState({\n            data1: {\n              longitude,\n              latitude,\n              speed,\n              updated,\n            },\n            oldData1: {...this.state.data1}\n          });\n        })\n        .catch(message => {\n          console.log(message);\n        });\n    service.getLocation2(this.state.trainNumber)\n        .then(({longitude, latitude, speed, updated}) => {\n          console.log('update 2');\n          this.setState({\n            data2: {\n              longitude,\n              latitude,\n              speed,\n              updated,\n            },\n            oldData2: {...this.state.data2},\n          });\n        })\n        .catch(message => {\n          console.log(message);\n        });\n  }\n\n  componentDidMount() {\n    service.getStations().then(stations => this.setState({stations}));\n    this.updateLocation();\n    this.isPollingEnabled = true;\n    this.poll();\n  }\n\n  componentWillUnmount() {\n    this.isPollingEnabled = false;\n  }\n\n  render() {\n    let {data1, data2, oldData1, oldData2, stations} = this.state;\n\n    if (!stations) {\n      return '';\n    }\n\n    return (\n        <div className=\"tracker\">\n          <div>\n            <b>rata.digitraffic.fi</b>\n            <Map data={data1} oldData={oldData1} stations={stations}/>\n          </div>\n          <div>\n            <b>junatkartalla</b>\n            <Map data={data2} oldData={oldData2} stations={stations}/>\n          </div>\n        </div>\n    );\n  }\n}\n\nlet Map = ({data, oldData, stations}) => {\n  let width = 175;\n  let height = 200;\n  let x = width / 2;\n  let y = height / 2;\n\n  // 0.01 coord point = 100px\n  let scale = 10000;\n  let latRatio = 4 / 10 * scale;\n  let lonRatio = 23 / 100 * scale;\n\n  return (\n      <div className=\"map-container\">\n        <table>\n          <tbody>\n          <tr>\n            <th>Longitude:</th>\n            <td>{data.longitude.toFixed(4)}</td>\n            <td>\n              (\n              {oldData &&\n                (data.longitude - oldData.longitude).toFixed(4)\n              }\n              )\n            </td>\n          </tr>\n          <tr>\n            <th>Latitude:</th>\n            <td>{data.latitude.toFixed(4)}</td>\n            <td>\n              (\n              {oldData &&\n                (data.latitude - oldData.latitude).toFixed(4)\n              }\n              )\n            </td>\n          </tr>\n          <tr>\n            <th>Speed:</th>\n            <td>{data.speed}</td>\n            <td>\n              (\n              {oldData && data.speed - oldData.speed}\n              )\n            </td>\n          </tr>\n          <tr>\n            <th>Updated:</th>\n            <td>{formatTime(data.updated)}</td>\n            <td>\n              (\n              {oldData && parseInt(\n                  (data.updated.getTime() - oldData.updated.getTime()) / 1000\n              )}\n              s )\n            </td>\n          </tr>\n          </tbody>\n        </table>\n        <svg width={width} height={height} className=\"map\">\n          {stations.map(station =>\n              <Station\n                  key={station.stationShortCode}\n                  x={x + (station.longitude - data.longitude) * lonRatio}\n                  y={y - (station.latitude - data.latitude) * latRatio}\n                  name={station.stationName}\n              />\n          )}\n          <Train x={x} y={y} color={'green'}/>\n        </svg>\n      </div>\n  );\n};\n\nlet Station = ({x, y, name}) => {\n  let radius = 6;\n  let strokeWidth = 1;\n  return (\n      <svg>\n        <circle\n            cx={x}\n            cy={y}\n            r={radius - strokeWidth}\n            style={{\n              fill: 'red', stroke: 'black', strokeWidth: strokeWidth,\n            }}\n        />\n        <text x={x + radius} y={y + radius} fill=\"black\"\n              style={{fontSize: 12}}>{name}</text>\n      </svg>\n  );\n};\n\nlet Train = ({x, y, color}) => (\n    <circle\n        cx={x}\n        cy={y}\n        r={5}\n        style={{\n          fill: color, stroke: 'black', strokeWidth: 1,\n        }}\n    />\n);\n\nexport default ApiRace;","import React, {Component} from 'react';\nimport 'styles/Detail.css';\nimport {getOccupied} from 'services/service';\n\nclass Detail extends Component {\n  constructor(props) {\n    super(props);\n\n    this.isPollingEnabled = true;\n\n    this.state = {\n      occupied: {\n        current: null,\n        next: null,\n        previous: null,\n      },\n      trainNumber: props.trainNumber,\n    };\n  }\n\n  poll() {\n    setTimeout(() => {\n      if (this.isPollingEnabled) {\n        this.updateLocation();\n        this.poll();\n      }\n    }, 5000);\n  }\n\n  componentDidMount() {\n    this.updateLocation();\n    this.poll();\n  }\n\n  componentWillUnmount() {\n    this.isPollingEnabled = false;\n  }\n\n  updateLocation() {\n    getOccupied(this.state.trainNumber)\n        .then(occupied => {\n          this.setState({\n            occupied: occupied,\n          });\n        })\n        .catch(message => {\n          // console.log(message)\n        });\n  }\n\n  render() {\n    let {occupied} = this.state;\n\n    return (\n        <div className=\"detail\">\n          <div className=\"detail-track\">\n            <div className=\"detail__station\">\n              {occupied.previous}\n            </div>\n            <div><i className=\"detail-track__direction fa fa-angle-double-right\"></i>\n            </div>\n            <div className=\"detail__station detail__station--current\">\n              {occupied.current}\n            </div>\n            <div><i className=\"detail-track__direction fa fa-angle-double-right\"></i>\n            </div>\n            <div className=\"detail__station\">\n              {occupied.next}\n            </div>\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default Detail;","// const URL_STATION = 'https://rata.digitraffic.fi/api/v1/live-trains/station/[STATION_SHORT_CODE]?minutes_after_departure=60&minutes_before_departure=60';\nconst URL_STATION = 'https://rata.digitraffic.fi/api/v1/live-trains/station/[STATION_SHORT_CODE]' +\n    '?minutes_before_arrival=0' +\n    '&minutes_after_arrival=0' +\n    '&minutes_before_departure=60' +\n    '&minutes_after_departure=5'\n;\n\nexport const fetchTrainsByStation = (stationShortCode, minutesBeforeDeparture, minutesAfterDeparture) => {\n  return new Promise((resolve, reject) =>\n      fetch(URL_STATION.replace(/\\[STATION_SHORT_CODE\\]/, stationShortCode))\n          .then(response => response.json())\n          .then(trains => {\n            resolve(trains);\n          })\n          .catch(error => {\n            reject(error);\n          })\n  );\n};","import {fetchTrainsByStation} from 'api';\n\nconst KEHARATA_TRAIN_LETTERS = ['P', 'I'];\n\nconst mapStationNameToStationShortCode = {\n  'kannelmaki': 'KAN',\n  'huopalahti': 'HPL',\n  'helsinki': 'HKI',\n};\n\ntype Train = {\n  number: int,\n  code: string,\n  scheduledDepartureTime: Date,\n  track: int,\n};\n\nexport const getTrainsByStation = (stationName) => {\n  let stationShortCode = mapStationNameToStationShortCode[stationName];\n  return fetchTrainsByStation(stationShortCode).then(trains => {\n    let keharataTrains = trains.filter(\n        train => KEHARATA_TRAIN_LETTERS.includes(train.commuterLineID));\n    return keharataTrains\n        .map(train => {\n          let departureTimetable = train.timeTableRows\n              .filter(timeTable =>\n                  timeTable.stationShortCode === stationShortCode\n                  && timeTable.type === 'DEPARTURE'\n              )\n              .pop();\n\n          let trainObject: Train = {\n            number: train.trainNumber,\n            code: train.commuterLineID,\n            scheduledDepartureTime: new Date(departureTimetable.scheduledTime),\n            track: parseInt(departureTimetable.commercialTrack),\n          };\n\n          return trainObject;\n        })\n        .sort((trainA, trainB) =>\n            trainA.scheduledDepartureTime.getTime() - trainB.scheduledDepartureTime.getTime()\n        );\n  });\n};","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport {getTrainsByStation} from 'services/TrainsService';\nimport {formatTimeShort} from 'utilities';\nimport 'styles/Station.css';\nimport {getUrl} from '../utilities';\n\nlet urlNameToHumanReadableName = {\n  'kannelmaki': 'Kannelmäki',\n  'huopalahti': 'Huopalahti',\n  'helsinki': 'Helsinki',\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stationShortCode: this.props.match.params.station,\n      trains: [],\n    };\n  }\n\n  componentDidMount() {\n    getTrainsByStation(this.state.stationShortCode).then(trains => {\n      this.setState({trains: trains});\n    });\n  }\n\n  render() {\n    let {station} = this.props.match.params;\n    let {trains} = this.state;\n\n    return (\n        <div className=\"station\">\n          <h1 className=\"station__name\">\n            {urlNameToHumanReadableName[station]}\n          </h1>\n          <table className=\"station-train-table\">\n            <thead>\n            <tr>\n              <th className=\"station-train-table__element\">Departs</th>\n              <th className=\"station-train-table__element station-train-table__element--centered\">Code</th>\n              <th className=\"station-train-table__element\">Number</th>\n              <th className=\"station-train-table__element station-train-table__element--centered\">track</th>\n            </tr>\n            </thead>\n            <tbody>\n            {trains.map(train =>\n                <tr className=\"station-train-table__train\">\n                  <td className=\"station-train-table__element\">\n                    {formatTimeShort(train.scheduledDepartureTime)}\n                  </td>\n                  <td className=\"station-train-table__element station-train-table__element--centered\">\n                    <Link\n                        key={train.number}\n                        to={getUrl('/' + train.number)}\n                        className=\"station-train-link\"\n                    >\n                      {train.code}\n                    </Link>\n                  </td>\n                  <td className=\"station-train-table__element\">\n                    {train.number}\n                  </td>\n                  <td className=\"station-train-table__element station-train-table__element--centered\">\n                    {train.track}\n                  </td>\n                </tr>\n            )}\n            </tbody>\n          </table>\n\n        </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport { Route, Link } from 'react-router-dom';\nimport 'font-awesome/css/font-awesome.css';\nimport 'styles/App.css';\nimport ApiRace from 'components/ApiRace';\nimport Detail from 'components/Detail';\nimport Station from 'components/Station';\nimport { getUrl } from 'utilities';\n\nconst App = () => {\n  return (\n    <div className=\"container\">\n      <header>\n        <Link to={getUrl('/')} className=\"\">Home</Link>\n      </header>\n      <main>\n        <Route exact path={getUrl('/')} component={Home} />\n        <Route path={getUrl('/station/:station')} component={Station} />\n        <Route exact path={getUrl('/:train')} component={Train} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n\nlet Home = () => (\n  <div>\n    <Link to={getUrl('/station/kannelmaki')} className=\"station-link\">Kannelmäki</Link>\n    <Link to={getUrl('/station/huopalahti')} className=\"station-link\">Huopalahti</Link>\n    <Link to={getUrl('/station/helsinki')} className=\"station-link\">Helsinki</Link>\n  </div>\n);\n\nlet Train = ({ match }) => (\n  <div>\n    <Detail trainNumber={match.params.train} />\n    <ApiRace trainNumber={match.params.train} />\n  </div>\n);","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport 'styles/index.css';\nimport App from 'components/App';\nimport registerServiceWorker from 'registerServiceWorker';\n\nReactDOM.render((\n    <Router>\n      <App/>\n    </Router>\n), document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}